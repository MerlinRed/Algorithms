graph = {
    'start': {'a': 6, 'b': 2},
    'a': {'fin': 1},
    'b': {'a': 3, 'fin': 5},
    'fin': {}
}

costs = {
    'a': 6,
    'b': 2,
    'fin': float('inf')
}

parents = {
    'a': 'start',
    'b': 'start',
    'fin': None
}

processed = []


def find_lowest_cost_node(costs):
    """Поиск минимального значения для доступа к вершине

        определяется минимальное значение как бесконечность
        опеределяется минмальное значение для узла как неизвестность

        проверяем узлы в таблице стоимостей
        достаем стоимость для данного узла и сравниваем
        если эта стоимость меньше бесконечности и этого узла еще нет в списке завершенных
        минимальным значением вместо бесконечности, становится эта стоимость
        узлом с минимальной стоимостью становится узел который обробатывали

        итд пока не определится минимальное

    """
    lowest_cost = float('inf')
    lowest_cost_node = None
    for node in costs:
        cost = costs[node]
        if cost < lowest_cost and node not in processed:
            lowest_cost = cost
            lowest_cost_node = node
    return lowest_cost_node


def diijkstra():
    """Алгоритм Дейкстры
        поиск кратчайшего пути по стоимости во взвешенном графе

        создаются 3 хэш таблицы
        1 - все графы и их потомки со стоимостью
        2 - стоимости для каждого графа
        3 - родители каждого из графов

        определяется ребро с наименьшей стоимостью к вершине
        просходит переход к нему
        в этой вершине осуществляется проверка ее соседей, на поиск минимального
        доступа по ребрам к ним через эту вершину, обновляются веса в таблице, вершина обработана

        после ищется в таблице следующая вершина с наименьшей стоимостью в ребре

        определяется итоговый путь от А к Б с наименьшей стоимостью

    """
    node = find_lowest_cost_node(costs)  # вершина до которой добраться можно с наименьшими затратами
    while node is not None:  # пока вершины есть
        cost = costs[node]  # получаем стоимость для доступа к этой вершине
        neighbors = graph[node]  # достаем соседей для этой вершины
        for n in neighbors.keys():  # перебираем соседей
            new_cost = cost + neighbors[n]  # стоимость вершины_1 + стоимость от вершины_1 до ее соседа
            if costs[n] > new_cost:  # старая стоимость доступа к соседу через вершину_2 > new_cost
                costs[n] = new_cost  # нашли новый короткий путь, обновляем веса для вершины_2
                parents[n] = node  # переназначается родитель, так как через него путь короче
        processed.append(node)  # узел обработан, добавляем в список завершенных
        node = find_lowest_cost_node(costs)  # достаем следующую вершину с минимальными затратами


diijkstra()
print(graph)
print(costs)
print(parents)
